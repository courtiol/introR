---
title: "Introduction to R"
author: Alexandre Courtiol & Liam D. Bailey
format:
  revealjs:
    toc: true
    toc-depth: 1
    theme: [white]
highlight-style: a11y
self-contained: true
self-contained-math: true
editor_options: 
  chunk_output_type: console
---


```{css, echo=FALSE}
p {
  font-size: 24px;
}

li {
  font-size: 24px;
}
```

# Installing R and RStudio

## What is R?

<!-- https://www.r-project.org/ -->
![](src/R_website.png)

## What is RStudio?

<!-- https://posit.co/download/rstudio-desktop/ -->
![](src/rstudio_website.png)

## What is RStudio?

![](src/rstudio_panes.png)


# R packages

------------------------------

## Installing and loading R packages

<br>

::: {.fragment}
```{r}
#| eval: false
#| echo: true
install.packages("tidyverse")
```
:::

<br>

::: {.fragment}
```{r}
#| echo: true
library(tidyverse)
```
:::

## Packages for this course

::: callout-note
Please install these on your system now.
:::

```{r}
#| eval: false
#| echo: true
# for all kinds of things
install.packages("tidyverse")

# for plotting
install.packages("ggforce")
install.packages("sf")
install.packages("lattice")
install.packages("viridisLite")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")

# for population genetics
install.packages("adegenet")
install.packages("pegas")
install.packages("poppr")
install.packages("hierfstat")
```

## Updating R packages

```{r}
#| echo: true
packageVersion("ggplot2")
```

::: {.fragment}
![](src/update.png)
:::

# Good practice

## Good practice

Set RStudio options.

![](src/rstudio_options1.png)

## Good practice

Set RStudio options.

![](src/rstudio_options2.png)


## Good practice

Save your script in a file.

![](src/rstudio_panes.png)

**We'll talk about RMarkdown later**

## Good practice

Use comments to understand your code better.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1|2|1-2"
# EXPLAIN WHAT THE CODE DOES
my_code_here
```

# Basics of R: Functions

## Functions

<br>
Functions (generally) take an input and return an output in R.
<br>For example, the function `sum()` takes a numeric vector and will return a single value.

```{r}
#| echo: true
## Compute the sum of some numbers
sum(c(1, 3, 5, 1))
```

<br>

::: {.fragment}
::: callout-note
`c()` is itself a function creating a **numeric vector**.
<br>We'll discuss more what a numeric vector is soon.
:::
:::

## Functions

<br>
Trouble-shoot using `?` or `help()`.

```{r}
#| echo: true
#| eval: false
## Help documentation of the function sum()
help(sum)
?sum
```

You can learn what package the function is from, what the function does and what arguments it takes.

## Functions

![](src/help_doc.png)

## Functions

::: callout-warning
Different packages might have functions with the same name. ðŸ¤¯
:::

<br>

::: {.fragment}

`package::function()` is explicit about which package to use.

```{r}
#| echo: true
## In case of ambiguity, use :: and specify the package
base::sum(c(1, 3, 5, 1))
```
:::

## Functions

<br>
If a function doesn't work it will display an error...

```{r}
#| echo: true
#| error: true
sum(-)
```

::: {.fragment}
...but these error messages aren't always easy to understand.
:::

# Basics of R: Objects

## Objects

<br>
Basic kinds of R objects (or 'classes'):

```{r}
#| echo: true
## Character
"word"
```

::: {.fragment}
```{r}
#| echo: true
## Numeric
1.2
```
:::

::: {.fragment}
```{r}
#| echo: true
## Logical
TRUE
```
:::

::: {.fragment}
```{r}
#| echo: true
## Factor
factor(c("A", "B"), levels = c("A", "B"))
```
:::

## Objects

<br>
Use `str()` if you're unsure!

```{r}
#| echo: true
str("word")
```

::: {.fragment}
```{r}
#| echo: true
str(1.2)
```
:::

::: {.fragment}
```{r}
#| echo: true
str(TRUE)
```
:::

::: {.fragment}
```{r}
#| echo: true
str(factor(c("A", "B")))
```
:::

## Objects

<br>
Assign an object with `<-` (or `->`).

```{r}
#| echo: true
#| code-line-numbers: "1-2|4-5|1-5"
## Save value to use later!
my_object <- "A"

## Check what object we just created
str(my_object)
```

# Vector

## Vector

<br>
$\geq$ 1 values of the **same type**.

```{r}
#| echo: true
## Create a vector of numeric
my_vector <- c(1.2, 3.4, 0.1)

## Check the structure...
str(my_vector)
```

## Vector

<br>
$\geq$ 1 values of the [**same type**]{style="color:#ff2c2d;"}.

```{r}
#| echo: true
## A vector *coerces* everything to be the same
my_vector <- c(115.3, -0.1, "2")

## Notice: everything is character!
str(my_vector)
```

## Vector

<br>
Vectors have 1 dimension (a length).

```{r}
#| echo: true
## Find how many values are in your vector
length(my_vector)
```

## Vector

<br>
Select particular values using 'indexing' with `[]`.

```{r}
#| echo: true
## 'Index' a vector using []
my_vector <- c("A", "B", "C")

## Find the first value in the vector
my_vector[1]
```

::: {.fragment}
```{r}
#| echo: true
## Find the first and third value in the vector
my_vector[c(1, 3)]
```
:::

::: {.fragment}
```{r}
#| echo: true
## Find everything *except* the second value in the vector
my_vector[-2]
```
:::

## Vector

<br>
Watch out for missing data.

```{r}
#| echo: true
#| code-line-numbers: "1-2|4|5|6|7|8|1-8"
# This numeric vector has some unusual values
missing_data <- c(NULL, 1.1, 0.2, NA, 7, NaN, Inf)

# NULL: Empty
# NA: Missing data (can be any type)
# NaN: Not a number (specific to numeric)
# Inf: Infinity
str(missing_data)
```

<br>

::: {.fragment}
```{r}
#| echo: true
missing_data
```
:::

# Matrix

## Matrix

<br>
$\geq$ 1 value(s) of the **same type** with **two dimensions**.

::: {.fragment}
```{r}
#| echo: true
## Create a 2x2 dimensional matrix
my_matrix <- matrix(c(1, 2, 3, 4),
                    nrow = 2, ncol = 2)
my_matrix
```
:::

<br>

::: {.fragment}
```{r}
#| echo: true
str(my_matrix)
```
:::

## Matrix

<br>
$\geq$ 1 value(s) of the [**same type**]{style="color:#ff2c2d;"} with **two dimensions**.

```{r}
#| echo: true
## A matrix will also coerce values!
my_matrix <- matrix(c("1", 2, 3, 4),
                    # Create a 2x2 matrix
                    nrow = 2, ncol = 2)

## Everything is character!
str(my_matrix)
```

## Matrix

<br>
$\geq$ 1 value(s) of the **same type** with [**two dimensions**]{style="color:#ff2c2d;"}.

```{r}
#| echo: true
## Find the number of rows in my matrix
nrow(my_matrix)
```

<br>

::: {.fragment}
```{r}
#| echo: true
## Find the number of columns in my matrix
ncol(my_matrix)
```
:::

## Matrix

Index a matrix with `[]`.

::: callout-note
Remember, now we have two dimensions.
<br>So we index with `[`[**ROW**]{style="color:#ff2c2d;"}`,` [**COLUMN**]{style="color:#ff2c2d;"}`]`.
:::

```{r}
#| echo: true
## Find the value at row 1 and column 2
my_matrix[1, 2]
```

::: {.fragment}
```{r}
#| echo: true
## Find all values in row 1
my_matrix[1, ]
```
:::

::: {.fragment}
```{r}
#| echo: true
## Find all values in column 2
my_matrix[, 2]
```
:::

# List

## List

Contains any number of items.

Each item can be a [**different type**]{style="color:#ff2c2d;"}.

```{r}
#| echo: true
## Storing in a vector or matrix coerces everything to be the same
c(c(1, 2, 3), c("A", "B", "C"), c(3, 4, 5))
```

::: {.fragment}
```{r}
#| echo: true
## Use lists to store character and numeric data in one object
my_list <- list(c(1, 2, 3),
                c("A", "B", "C"),
                c(3, 4, 5))

my_list
```
:::

## List

Contains any number of items.

Each item can be a [**different type**]{style="color:#ff2c2d;"}.

```{r}
#| echo: true
## Check the structure
str(my_list)
```

## List

<br>
A list has [**one dimension**]{style="color:#ff2c2d;"} (length: the number of items in the list).

```{r}
#| echo: true
## Number of items in the list
length(my_list)
```

## List

<br>
We can index a list with `[]` and `[[]]`.

::: callout-warning
They have slightly different meanings!
:::

::: {.fragment}
```{r}
#| echo: true
## Use `[]` to create a smaller list
## Create a new list with item 1 and 3
my_list[c(1, 3)]
```
:::

::: {.fragment}
```{r}
#| echo: true
## Use `[[]]` to access the items inside the list
## Return list item 1
my_list[[1]]
```
:::

## List

<br>
When list-elements are named, they can be accessed using either `[[]]` or `$`.

```{r}
#| echo: true
## Create a named list
my_named_list <- list(first = c(1, 2, 3),
                      second = c("A", "B", "C"),
                      third = c(3, 4, 5))
str(my_named_list)
```

::: {.fragment}
```{r}
#| echo: true
## Use `[[]]` to access the items inside the list
my_named_list[["first"]] # same as my_named_list[[1]]
```
:::

::: {.fragment}
```{r}
#| echo: true
## Use `$` to access the items inside the list
my_named_list$first
```
:::

## List

::: callout-note
Many advanced functions will store their output as a list object.

Remember, you can use `str()` to understand them better.
:::

```{r}
#| echo: true
# These objects have a nice print output
model <- lm(Sepal.Length ~ Sepal.Width, data = iris)
model
```

## List

::: callout-note
Many advanced functions will store their output as a list object.

Remember, you can use `str()` to understand them better.
:::

```{r}
#| echo: true
# Internally, they have a lot more information!
str(model)
```

# Data frame

## Data frame

A special type of list:

- Each item in the list (i.e. column) is a vector ([**same type**]{style="color:#ff2c2d;"}).
- All items in the list are the [**same length**]{style="color:#ff2c2d;"}.
- Each item has a [**unique name**]{style="color:#ff2c2d;"}.

```{r}
#| echo: true
## Create our own data frame!
my_df <- data.frame(col1 = c(1, 2, 3, 4),
                    col2 = c("A", "B", "C", "D"),
                    col3 = c(3, 4, 5, 6))

my_df
```

## Data frame

A special type of list:

- Each item in the list (i.e. column) is a vector ([**same type**]{style="color:#ff2c2d;"}).
- All items in the list are the [**same length**]{style="color:#ff2c2d;"}.
- Each item has a [**unique name**]{style="color:#ff2c2d;"}.

```{r}
#| echo: true
## Check the structure
str(my_df)
```

## Data frame

<br>
A data frame has [**two dimensions**]{style="color:#ff2c2d;"} (number of rows and number of columns).

```{r}
#| echo: true
## Number of rows...
nrow(my_df)
```

<br>

```{r}
#| echo: true
## Number of columns...
ncol(my_df)
```

## Data frame

<br>
We can index using `[]` (just like a matrix) or using column names.

```{r}
#| echo: true
## Items in rows 1 and 2 from column 2
my_df[c(1, 2), 2]
```

<br>

::: {.fragment}
```{r}
#| echo: true
## All items in column 2
my_df[, 2] # same as my_df[[2]]
```
:::

::: {.fragment}
```{r}
#| echo: true
## All items in column 2
my_df[, "col2"] # same as my_df[["col2"]]
```
:::

::: {.fragment}
```{r}
#| echo: true
## All items in column named 'col2'
my_df$col2 # but my_df$2 would not work!
```
:::

## Data frame

<br>
We usually create a data frame by reading in a `.csv` file!

```{r}
#| echo: true
## Items in rows 1 and 2 from column 2
iris_df <- read.csv("iris.csv")

str(iris_df)
```

## Data frame

<br>
Use functions `head()`, `tail()`, or `summary()` to investigate a large data frame.

```{r}
#| echo: true
## The first few rows of data...
head(iris_df)
```

## Data frame

<br>
Use functions `head()`, `tail()`, or `summary()` to investigate a large data frame.

```{r}
#| echo: true
## A summary of all the columns
summary(iris_df)
```


# Using Pipes

## Pipes

<br>

Pipes (`|>`) forward what is before them as first argument to a function after them.

```{r}
#| echo: true
c(1, 2, 3) |> sum()
```

<br>

::: {.fragment}
This is typically useful to make the code of complex data wrangling compact and readable:

```{r}
#| echo: true
#| code-line-numbers: "1-9|3|4|5|6|7|1-9"
emails <- c("john.smith@email.com", "jane-doe@yahoo.com")
            
emails |>
  str_remove("@.*") |> # note the use of regular expression (regex)
  str_split("\\.|-") |>
  list_transpose() |>
  as.data.frame(col.names = c("firstname", "surname")) -> people

people
```
:::


# Using RMarkdown

## Using RMarkdown

RMarkdown (`.Rmd`) file is a great way to record and share your analyses!

![](src/Rmd_example.png)

## Using RMarkdown

Include code and output in the same document.

```{r}
#| echo: fenced
## Write your code inside these 'chunks'
c(1, 2, 3, 4)
```

## Using RMarkdown

Include plots to make a report.

```{r}
#| echo: fenced
plot(Sepal.Length ~ Sepal.Width, data = iris_df)
```

## Using RMarkdown

Write plain text to keep notes.

````
# Section header

## Section subheader

Some notes about my code **in bold**. Below I include my code chunk...

```{{r}}
1 + 1
```

Some more notes...

````

## Using RMarkdown

'Knit' your notes to create a report.

::: columns
::: {.column width="50%"}
````
# Section header

## Section subheader

Some notes about my code **in bold**. Below I include my code chunk...

```{{r}}
1 + 1
```

Some more notes...

````
:::
::: {.column width="50%"}
![](src/knit_example.png)
:::
:::

## Using RMarkdown

'Knit' your notes to create a report.

![](src/knit_button.png)

## Trying out RMarkdown

- Create a new RMarkdown file in RStudio (File > New File > RMarkdown).

- Create a new chunk of R code:

```{r}
#| echo: true
#| eval: false
mean(c(1, 2, "3", 4, NA))
```

- Knit the document to html.

- Check the document.<br>Does the code work properly? Can you work out why?

- **BONUS**:
  - Search for the RMarkdown Cheatsheet online and try adding some headers and bold text.
 
  - Knit the document to PDF.
